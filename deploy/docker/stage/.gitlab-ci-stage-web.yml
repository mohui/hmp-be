stage:web:deploy:
  extends:
    - .web:init
  image: docker:git
  stage: deploy
  tags:
    - pve
    - docker
  variables:
    IMAGE_TAG: stage-${CI_COMMIT_SHORT_SHA}
    APP_PROFILE: stage
  needs:
    - job: stage:web:build
      artifacts: false
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^standalone*/'
  script:
    - mkdir -p ~/.ssh
    - echo "$REVIEW_SSH_ID_RSA" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh -o StrictHostKeyChecking=no -p ${STAGE_SSH_PORT} ${STAGE_SSH_USER}@${STAGE_SSH_HOST} "IMAGE_TAG=${IMAGE_TAG} APP_PROFILE=${APP_PROFILE} docker compose -f ~/app/docker-compose.yaml up -d ${CONTAINER_NAME}"
  environment:
    name: stage/${CONTAINER_NAME}
    url: ${ENV_URI}
    on_stop: stage:web:cleanup

stage:web:cleanup:
  extends:
    - .web:init
  image: docker:git
  stage: cleanup
  tags:
    - pve
    - docker
  variables:
    IMAGE_TAG: stage-${CI_COMMIT_SHORT_SHA}
  needs:
    - stage:web:deploy
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^standalone*/'
      when: manual
  script:
    - mkdir -p ~/.ssh
    - echo "$REVIEW_SSH_ID_RSA" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh -o StrictHostKeyChecking=no -p ${STAGE_SSH_PORT} ${STAGE_SSH_USER}@${STAGE_SSH_HOST} "docker compose -f ~/app/docker-compose.yaml rm -fsv ${CONTAINER_NAME}"
  environment:
    name: stage/${CONTAINER_NAME}
    action: stop